// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: leveldbr.proto

#include "leveldbr.pb.h"
#include "leveldbr.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace remote {

static const char* Leveldb_method_names[] = {
  "/remote.Leveldb/Connection",
  "/remote.Leveldb/Remove",
};

std::unique_ptr< Leveldb::Stub> Leveldb::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Leveldb::Stub> stub(new Leveldb::Stub(channel, options));
  return stub;
}

Leveldb::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Connection_(Leveldb_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Remove_(Leveldb_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::remote::InMessage, ::remote::OutMessage>* Leveldb::Stub::ConnectionRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::remote::InMessage, ::remote::OutMessage>::Create(channel_.get(), rpcmethod_Connection_, context);
}

void Leveldb::Stub::async::Connection(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::remote::InMessage,::remote::OutMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::remote::InMessage,::remote::OutMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_Connection_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::remote::InMessage, ::remote::OutMessage>* Leveldb::Stub::AsyncConnectionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::remote::InMessage, ::remote::OutMessage>::Create(channel_.get(), cq, rpcmethod_Connection_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::remote::InMessage, ::remote::OutMessage>* Leveldb::Stub::PrepareAsyncConnectionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::remote::InMessage, ::remote::OutMessage>::Create(channel_.get(), cq, rpcmethod_Connection_, context, false, nullptr);
}

::grpc::Status Leveldb::Stub::Remove(::grpc::ClientContext* context, const ::remote::RemoveRequest& request, ::remote::RemoveReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::remote::RemoveRequest, ::remote::RemoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void Leveldb::Stub::async::Remove(::grpc::ClientContext* context, const ::remote::RemoveRequest* request, ::remote::RemoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::remote::RemoveRequest, ::remote::RemoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void Leveldb::Stub::async::Remove(::grpc::ClientContext* context, const ::remote::RemoveRequest* request, ::remote::RemoveReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::remote::RemoveReply>* Leveldb::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::remote::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::remote::RemoveReply, ::remote::RemoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Remove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::remote::RemoveReply>* Leveldb::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::remote::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

Leveldb::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Leveldb_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Leveldb::Service, ::remote::InMessage, ::remote::OutMessage>(
          [](Leveldb::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::remote::OutMessage,
             ::remote::InMessage>* stream) {
               return service->Connection(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Leveldb_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Leveldb::Service, ::remote::RemoveRequest, ::remote::RemoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Leveldb::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remote::RemoveRequest* req,
             ::remote::RemoveReply* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
}

Leveldb::Service::~Service() {
}

::grpc::Status Leveldb::Service::Connection(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::remote::OutMessage, ::remote::InMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Leveldb::Service::Remove(::grpc::ServerContext* context, const ::remote::RemoveRequest* request, ::remote::RemoveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace remote

